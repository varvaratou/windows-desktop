//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TradeOffer", Namespace="http://schemas.datacontract.org/2004/07/BeanTrader.Models")]
    public partial class TradeOffer : object
    {
        
        private System.Collections.Generic.Dictionary<ServiceReference1.Beans, uint> AskingField;
        
        private System.Guid IdField;
        
        private System.Collections.Generic.Dictionary<ServiceReference1.Beans, uint> OfferingField;
        
        private System.Guid SellerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<ServiceReference1.Beans, uint> Asking
        {
            get
            {
                return this.AskingField;
            }
            set
            {
                this.AskingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<ServiceReference1.Beans, uint> Offering
        {
            get
            {
                return this.OfferingField;
            }
            set
            {
                this.OfferingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SellerId
        {
            get
            {
                return this.SellerIdField;
            }
            set
            {
                this.SellerIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Beans", Namespace="http://schemas.datacontract.org/2004/07/BeanTrader.Models")]
    public enum Beans : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trader", Namespace="http://schemas.datacontract.org/2004/07/BeanTrader.Models")]
    public partial class Trader : object
    {
        
        private System.Guid IdField;
        
        private int[] InventoryField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Inventory
        {
            get
            {
                return this.InventoryField;
            }
            set
            {
                this.InventoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.BeanTraderService", CallbackContract=typeof(ServiceReference1.BeanTraderServiceCallback))]
    public interface BeanTraderService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BeanTraderService/ListenForTradeOffers", ReplyAction="http://tempuri.org/BeanTraderService/ListenForTradeOffersResponse")]
        System.Threading.Tasks.Task<ServiceReference1.TradeOffer[]> ListenForTradeOffersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BeanTraderService/GetCurrentTraderInfo", ReplyAction="http://tempuri.org/BeanTraderService/GetCurrentTraderInfoResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Trader> GetCurrentTraderInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/BeanTraderService/Login")]
        System.Threading.Tasks.Task LoginAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/BeanTraderService/Logout")]
        System.Threading.Tasks.Task LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BeanTraderService/GetTraderNames", ReplyAction="http://tempuri.org/BeanTraderService/GetTraderNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetTraderNamesAsync(System.Guid[] traderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BeanTraderService/AcceptTrade", ReplyAction="http://tempuri.org/BeanTraderService/AcceptTradeResponse")]
        System.Threading.Tasks.Task<bool> AcceptTradeAsync(System.Guid offerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BeanTraderService/OfferTrade", ReplyAction="http://tempuri.org/BeanTraderService/OfferTradeResponse")]
        System.Threading.Tasks.Task<System.Guid> OfferTradeAsync(ServiceReference1.TradeOffer offer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BeanTraderService/CancelTradeOffer", ReplyAction="http://tempuri.org/BeanTraderService/CancelTradeOfferResponse")]
        System.Threading.Tasks.Task<bool> CancelTradeOfferAsync(System.Guid offerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/BeanTraderService/StopListening")]
        System.Threading.Tasks.Task StopListeningAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface BeanTraderServiceCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/BeanTraderService/AddNewTradeOffer")]
        void AddNewTradeOffer(ServiceReference1.TradeOffer offer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/BeanTraderService/RemoveTradeOffer")]
        void RemoveTradeOffer(System.Guid offerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/BeanTraderService/TradeAccepted")]
        void TradeAccepted(ServiceReference1.TradeOffer offer, System.Guid buyerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface BeanTraderServiceChannel : ServiceReference1.BeanTraderService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class BeanTraderServiceClientBase : System.ServiceModel.DuplexClientBase<ServiceReference1.BeanTraderService>, ServiceReference1.BeanTraderService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BeanTraderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, BeanTraderServiceClientBase.GetDefaultBinding(), BeanTraderServiceClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_BeanTraderService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BeanTraderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, BeanTraderServiceClientBase.GetBindingForEndpoint(endpointConfiguration), BeanTraderServiceClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BeanTraderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, BeanTraderServiceClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BeanTraderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, BeanTraderServiceClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BeanTraderServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.TradeOffer[]> ListenForTradeOffersAsync()
        {
            return base.Channel.ListenForTradeOffersAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Trader> GetCurrentTraderInfoAsync()
        {
            return base.Channel.GetCurrentTraderInfoAsync();
        }
        
        public System.Threading.Tasks.Task LoginAsync(string name)
        {
            return base.Channel.LoginAsync(name);
        }
        
        public System.Threading.Tasks.Task LogoutAsync()
        {
            return base.Channel.LogoutAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetTraderNamesAsync(System.Guid[] traderId)
        {
            return base.Channel.GetTraderNamesAsync(traderId);
        }
        
        public System.Threading.Tasks.Task<bool> AcceptTradeAsync(System.Guid offerId)
        {
            return base.Channel.AcceptTradeAsync(offerId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> OfferTradeAsync(ServiceReference1.TradeOffer offer)
        {
            return base.Channel.OfferTradeAsync(offer);
        }
        
        public System.Threading.Tasks.Task<bool> CancelTradeOfferAsync(System.Guid offerId)
        {
            return base.Channel.CancelTradeOfferAsync(offerId);
        }
        
        public System.Threading.Tasks.Task StopListeningAsync()
        {
            return base.Channel.StopListeningAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_BeanTraderService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.TcpClientCredentialType.Certificate;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_BeanTraderService))
            {
                return new System.ServiceModel.EndpointAddress(new System.Uri("net.tcp://localhost:8090/BeanTraderService"), new System.ServiceModel.DnsEndpointIdentity("BeanTrader"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BeanTraderServiceClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_BeanTraderService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BeanTraderServiceClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_BeanTraderService);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_BeanTraderService,
        }
    }
    
    public class AddNewTradeOfferReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public AddNewTradeOfferReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public ServiceReference1.TradeOffer offer
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((ServiceReference1.TradeOffer)(this.results[0]));
            }
        }
    }
    
    public class RemoveTradeOfferReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public RemoveTradeOfferReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Guid offerId
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    public class TradeAcceptedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public TradeAcceptedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public ServiceReference1.TradeOffer offer
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((ServiceReference1.TradeOffer)(this.results[0]));
            }
        }
        
        public System.Guid buyerId
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    }
    
    public partial class BeanTraderServiceClient : BeanTraderServiceClientBase
    {
        
        public BeanTraderServiceClient(EndpointConfiguration endpointConfiguration) : 
                this(new BeanTraderServiceClientCallback(), endpointConfiguration)
        {
        }
        
        private BeanTraderServiceClient(BeanTraderServiceClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }
        
        public BeanTraderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new BeanTraderServiceClientCallback(), binding, remoteAddress)
        {
        }
        
        private BeanTraderServiceClient(BeanTraderServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public BeanTraderServiceClient() : 
                this(new BeanTraderServiceClientCallback())
        {
        }
        
        private BeanTraderServiceClient(BeanTraderServiceClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<AddNewTradeOfferReceivedEventArgs> AddNewTradeOfferReceived;
        
        public event System.EventHandler<RemoveTradeOfferReceivedEventArgs> RemoveTradeOfferReceived;
        
        public event System.EventHandler<TradeAcceptedReceivedEventArgs> TradeAcceptedReceived;
        
        private void OnAddNewTradeOfferReceived(object state)
        {
            if ((this.AddNewTradeOfferReceived != null))
            {
                object[] results = ((object[])(state));
                this.AddNewTradeOfferReceived(this, new AddNewTradeOfferReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRemoveTradeOfferReceived(object state)
        {
            if ((this.RemoveTradeOfferReceived != null))
            {
                object[] results = ((object[])(state));
                this.RemoveTradeOfferReceived(this, new RemoveTradeOfferReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnTradeAcceptedReceived(object state)
        {
            if ((this.TradeAcceptedReceived != null))
            {
                object[] results = ((object[])(state));
                this.TradeAcceptedReceived(this, new TradeAcceptedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class BeanTraderServiceClientCallback : object, BeanTraderServiceCallback
        {
            
            private BeanTraderServiceClient proxy;
            
            public void Initialize(BeanTraderServiceClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void AddNewTradeOffer(ServiceReference1.TradeOffer offer)
            {
                this.proxy.OnAddNewTradeOfferReceived(new object[] {
                            offer});
            }
            
            public void RemoveTradeOffer(System.Guid offerId)
            {
                this.proxy.OnRemoveTradeOfferReceived(new object[] {
                            offerId});
            }
            
            public void TradeAccepted(ServiceReference1.TradeOffer offer, System.Guid buyerId)
            {
                this.proxy.OnTradeAcceptedReceived(new object[] {
                            offer,
                            buyerId});
            }
        }
    }
}
